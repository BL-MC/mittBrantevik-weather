[
    {
        "id": "35ebad916f0a27ed",
        "type": "tab",
        "label": "blinky-shellyplug-s-trays",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6be74e15039dce40",
        "type": "group",
        "z": "35ebad916f0a27ed",
        "name": "",
        "style": {
            "stroke": "#000000",
            "label": true,
            "fill": "#487895",
            "color": "#ffffff"
        },
        "nodes": [
            "6dae18247871f69e"
        ],
        "x": 314,
        "y": 799,
        "w": 272,
        "h": 82
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Chill Detector",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "84d80994.260508",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "49c7b59e.00e86c",
        "type": "inject",
        "z": "35ebad916f0a27ed",
        "name": "read Tray",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "readTraydesc",
        "payload": "GIZMOMQTTSETTINGSUBSCRIBE",
        "payloadType": "env",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "f7b2b73c.569598"
            ]
        ]
    },
    {
        "id": "f7b2b73c.569598",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Init flow Variables",
        "func": "var mqttSplit = msg.payload.split('/');\nvar trayProps = {\n    box         :   mqttSplit[0],\n    type        :   mqttSplit[1],\n};\nflow.set('trayProps',trayProps);\nflow.set('settingInProgress', false);\nflow.set('trays',[]);\nflow.set('archiveTimes',[]);\nreturn {topic: \"getTrayProps\", payload: true};  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "1a3f1121b7b0f033",
                "1849ea2986414070"
            ]
        ]
    },
    {
        "id": "2545c4a66f386231",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "check for tray defined in",
        "links": [
            "175febc97e8ae24a"
        ],
        "x": 505,
        "y": 160,
        "wires": [
            [
                "1a3f1121b7b0f033"
            ]
        ]
    },
    {
        "id": "1a3f1121b7b0f033",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Request tray from Database",
        "func": "if (flow.get('trays').length > 0) return [null,null];\nlet trayProps  = flow.get('trayProps');\nnode.warn(\"Asking for tray from database\");\nvar newMsg =\n{\n    topic: trayProps.box + '/' + trayProps.type + '/' + 'ALL' + '/echo',\n    payload: JSON.stringify({ topic: trayProps.box + '/' + trayProps.type + '/' + 'ALL' + '/setting/echo' })\n};\nreturn [newMsg, { topic: \"getTrayProps\", payload: true }];  \n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 120,
        "wires": [
            [
                "063def90cca3eae3"
            ],
            [
                "26dd391080aedecf"
            ]
        ]
    },
    {
        "id": "063def90cca3eae3",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "request tray echo out",
        "mode": "link",
        "links": [
            "f882c2407b2620be"
        ],
        "x": 815,
        "y": 40,
        "wires": []
    },
    {
        "id": "26dd391080aedecf",
        "type": "delay",
        "z": "35ebad916f0a27ed",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 100,
        "wires": [
            [
                "175febc97e8ae24a"
            ]
        ]
    },
    {
        "id": "175febc97e8ae24a",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "check for tray defined out",
        "mode": "link",
        "links": [
            "2545c4a66f386231"
        ],
        "x": 1025,
        "y": 160,
        "wires": []
    },
    {
        "id": "f882c2407b2620be",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "request tray echo in",
        "links": [
            "063def90cca3eae3"
        ],
        "x": 1575,
        "y": 220,
        "wires": [
            [
                "05f1df43d04e1ad1"
            ]
        ]
    },
    {
        "id": "5023092b.a0fe38",
        "type": "mqtt in",
        "z": "35ebad916f0a27ed",
        "name": "Subscribe Settings",
        "topic": "$(GIZMOMQTTSETTINGSUBSCRIBE)",
        "qos": "0",
        "datatype": "auto",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 180,
        "y": 400,
        "wires": [
            [
                "f812bb6a.1aec68"
            ]
        ]
    },
    {
        "id": "f812bb6a.1aec68",
        "type": "json",
        "z": "35ebad916f0a27ed",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 360,
        "y": 400,
        "wires": [
            [
                "e0d2b8e49c2e469b"
            ]
        ]
    },
    {
        "id": "f9be9054ce456982",
        "type": "switch",
        "z": "35ebad916f0a27ed",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "echo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reloadTrays",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 700,
        "y": 400,
        "wires": [
            [
                "ce7c14e281a023dc"
            ],
            [
                "a9b1f3a35cafde9c"
            ],
            [
                "e560bca3296d3f84"
            ],
            [
                "24f5d970df2b1dfa"
            ],
            [
                "4bc813284823bae3"
            ]
        ]
    },
    {
        "id": "e0d2b8e49c2e469b",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Filter MQTT",
        "func": "let mqttTopic = msg.topic.split('/')\nlet trayName = mqttTopic[2];\nlet actionTopic = mqttTopic[4];\nif (trayName == env.get(\"ADMINNAME\"))\n{\n    if (actionTopic == 'setting') actionTopic = 'reloadTrays'\n    return {topic:actionTopic, payload:msg.payload};\n}\nif (actionTopic == 'echo')\n{\n    return {topic:'echo', payload:msg.payload};\n}\nlet trays = flow.get('trays');\nlet tray = null;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)  tray = trays[ii];\n}\nif (tray ==  null) return null;\nreturn {topic:actionTopic, payload:msg.payload, tray:tray};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 400,
        "wires": [
            [
                "f9be9054ce456982"
            ]
        ]
    },
    {
        "id": "24f5d970df2b1dfa",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Save Trays in flow",
        "func": "let tray = msg.payload;\nif (tray.name == env.get(\"ADMINNAME\"))\n{\n    tray.reloadTrays.value = 0;\n    flow.set('adminTray', tray);\n    return null;\n}\ntray.watchdog.value = 0;\nflow.get('trays').push(tray);\nflow.get('archiveTimes').push(tray.timeStamp);\n//node.warn(flow.get('trays'));\nreturn null;\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 520,
        "wires": []
    },
    {
        "id": "cffe9c2a52b1e43e",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "New Reading out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b"
        ],
        "x": 555,
        "y": 620,
        "wires": []
    },
    {
        "id": "0dba75772bcd5ea0",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "New Archive out",
        "mode": "link",
        "links": [
            "ce5672e1f22d7692"
        ],
        "x": 555,
        "y": 660,
        "wires": []
    },
    {
        "id": "da3c617faa3892d7",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Create Readings",
        "func": "let trayProps = flow.get('trayProps');\nlet topicSplit = msg.topic.split('/');\nif (topicSplit[1] != trayProps.type) return null;\nlet trayName = topicSplit[2];\nlet trays = flow.get('trays');\nlet tray = null;\nlet trayIndex = -1;\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].name == trayName)\n    {\n        tray = trays[ii];\n        trayIndex = ii;\n    }\n}\nif (tray ==  null) return null;\nlet newData = false;\ntray.timeStamp = new Date().getTime();\n\n// Start Custom \nif (topicSplit[3] == 'temperature')     tray.temperature.value     = Number(msg.payload);\nif (topicSplit[3] == 'overtemperature') tray.overtemperature.value = Number(msg.payload);\nif (topicSplit[3] == 'relay')\n{\n    if (topicSplit.length < 6)\n    {\n        if (msg.payload == \"off\") tray.relay.value = 0;\n        if (msg.payload == \"on\")  tray.relay.value = 1;\n        newData = true;\n    }\n    else\n    {\n        if (topicSplit[5] == 'power')  tray.power.value  = Number(msg.payload);\n        if (topicSplit[5] == 'energy')\n        {\n            tray.energy.value = Math.round(10 * Number(msg.payload) / 60) / 10;\n            tray.watchdog.value = tray.watchdog.value + 1;\n            if (tray.watchdog.value > 32760) tray.watchdog.value = 0;\n        }\n    }\n}\nif (!newData) return null;\n// End custom\n\nlet newMsg = {topic:trayName, payload:tray};\nlet archiveMsg = null;\nlet archiveTimes = flow.get('archiveTimes');\nif ((tray.timeStamp - archiveTimes[trayIndex]) > tray.arcPeriod)\n{\n    archiveTimes[trayIndex] = tray.timeStamp;\n    archiveMsg = newMsg;\n}\nreturn  [newMsg,archiveMsg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 660,
        "wires": [
            [
                "cffe9c2a52b1e43e"
            ],
            [
                "0dba75772bcd5ea0"
            ]
        ]
    },
    {
        "id": "8674b6870aed740f",
        "type": "mqtt out",
        "z": "35ebad916f0a27ed",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1280,
        "y": 220,
        "wires": []
    },
    {
        "id": "644bd24ad5c779d2",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "deviceMQTT publish",
        "links": [
            "e616f7335fc84c23",
            "baed8fbe731e1cf0"
        ],
        "x": 1115,
        "y": 220,
        "wires": [
            [
                "8674b6870aed740f"
            ]
        ]
    },
    {
        "id": "d029d546e79dc7cc",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Publish tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('trayProps').box + '/' + tray.type + '/' + tray.name + '/reading',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 280,
        "wires": [
            [
                "05f1df43d04e1ad1"
            ]
        ]
    },
    {
        "id": "6b45b4c31fad6b8b",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "Publish Tray In",
        "links": [
            "cffe9c2a52b1e43e",
            "db68a00ed2d7ce63",
            "87f76838d7e80f8d",
            "938e10b962484b58"
        ],
        "x": 1115,
        "y": 280,
        "wires": [
            [
                "e3bf1ffa191c317f"
            ]
        ]
    },
    {
        "id": "03302d45194b1091",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Archive tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('trayProps').box + '/' + tray.type + '/' + tray.name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 340,
        "wires": [
            [
                "81a2eeceab4079a2"
            ]
        ]
    },
    {
        "id": "ce5672e1f22d7692",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "Archive Tray In",
        "links": [
            "0dba75772bcd5ea0",
            "db68a00ed2d7ce63"
        ],
        "x": 1115,
        "y": 340,
        "wires": [
            [
                "c0c0f2e784c5886e"
            ]
        ]
    },
    {
        "id": "81a2eeceab4079a2",
        "type": "delay",
        "z": "35ebad916f0a27ed",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1540,
        "y": 340,
        "wires": [
            [
                "05f1df43d04e1ad1"
            ]
        ]
    },
    {
        "id": "e3bf1ffa191c317f",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 280,
        "wires": [
            [
                "d029d546e79dc7cc"
            ]
        ]
    },
    {
        "id": "c0c0f2e784c5886e",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 340,
        "wires": [
            [
                "03302d45194b1091"
            ]
        ]
    },
    {
        "id": "05f1df43d04e1ad1",
        "type": "mqtt out",
        "z": "35ebad916f0a27ed",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1710,
        "y": 280,
        "wires": []
    },
    {
        "id": "db68a00ed2d7ce63",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "nonBlinkybusSetting Out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b",
            "ce5672e1f22d7692"
        ],
        "x": 1025,
        "y": 340,
        "wires": []
    },
    {
        "id": "baed8fbe731e1cf0",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Tray Setting In",
        "mode": "link",
        "links": [
            "644bd24ad5c779d2"
        ],
        "x": 1025,
        "y": 280,
        "wires": []
    },
    {
        "id": "ce7c14e281a023dc",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Create Setting",
        "func": "let tray = msg.tray;\n// Start Custom\nlet publishTopic = \"shellies\" + \"/\" + tray.type + \"/\" + tray.name + \"/relay/0/command\";\n// End Custom\nlet blinkyBusSettingMsg = \n{\n    topic : publishTopic, \n    payload : {} \n}\nlet blinkyBusMessage = false;\nswitch(msg.payload.cube)\n{\n// Start Custom\n    case 'setRelay':\n        if (msg.payload.value == 0)  blinkyBusSettingMsg.payload = \"off\"\n        if (msg.payload.value == 1)  blinkyBusSettingMsg.payload = \"on\"\n        tray[msg.payload.cube].value = msg.payload.value;\n        blinkyBusMessage = true;\n        break;\n    case 'opState':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n   case 'startScheduleTime':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'stopScheduleTime':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'maxRate':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'alias':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'priceArea':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'timeZone':\n        tray[msg.payload.cube].value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n     default:\n        break;\n// End Custom\n}\nlet msgArray = [null,null];\nif (blinkyBusMessage)\n{\n    msgArray = [blinkyBusSettingMsg, {topic:'settingDone', payload:tray}];\n    \n}\nelse\n{\n    msgArray = [null,{topic:'settingDone', payload:tray}];\n}\nreturn msgArray;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 300,
        "wires": [
            [
                "baed8fbe731e1cf0"
            ],
            [
                "db68a00ed2d7ce63"
            ]
        ]
    },
    {
        "id": "e560bca3296d3f84",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Set Alarm Block",
        "func": "let cubeAlarm = msg.tray[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\ncubeAlarm.notify.name = msg.payload.notify.name;\ncubeAlarm.notify.number = msg.payload.notify.number;\nreturn {topic:'trayConfigCompleted', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 460,
        "wires": [
            [
                "938e10b962484b58"
            ]
        ]
    },
    {
        "id": "a9b1f3a35cafde9c",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Ping Tray",
        "func": "return {topic:'ping', payload:msg.tray};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 400,
        "wires": [
            [
                "87f76838d7e80f8d"
            ]
        ]
    },
    {
        "id": "87f76838d7e80f8d",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Ping Out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b"
        ],
        "x": 1025,
        "y": 400,
        "wires": []
    },
    {
        "id": "938e10b962484b58",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Continue Devie Readings out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b"
        ],
        "x": 1025,
        "y": 460,
        "wires": []
    },
    {
        "id": "4bc813284823bae3",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Reload trays",
        "func": "if (msg.value == 0) return null;\nreturn {topic:'readTraydesc', payload: env.get(\"GIZMOMQTTSETTINGSUBSCRIBE\")}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 580,
        "wires": [
            [
                "e6b2a65ac7c0f8e7"
            ]
        ]
    },
    {
        "id": "e6b2a65ac7c0f8e7",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "reload trays out",
        "mode": "link",
        "links": [
            "a2b6f8c1cd78afa6"
        ],
        "x": 1025,
        "y": 580,
        "wires": []
    },
    {
        "id": "a2b6f8c1cd78afa6",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "reload trays in",
        "links": [
            "e6b2a65ac7c0f8e7"
        ],
        "x": 205,
        "y": 160,
        "wires": [
            [
                "f7b2b73c.569598"
            ]
        ]
    },
    {
        "id": "a1ac9e631b1c38ed",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Gizmo MQTT Reading topic",
        "func": "let subscribeTopic = \"shellies/shellyplug-s/+/#\";  //Custom\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 580,
        "wires": [
            [
                "947b3065ee2175f6"
            ]
        ]
    },
    {
        "id": "947b3065ee2175f6",
        "type": "mqtt in",
        "z": "35ebad916f0a27ed",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 230,
        "y": 660,
        "wires": [
            [
                "da3c617faa3892d7"
            ]
        ]
    },
    {
        "id": "83a5bccd57b9c2a0",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "Gizmo MQTT Reading topic in",
        "links": [
            "1849ea2986414070"
        ],
        "x": 125,
        "y": 580,
        "wires": [
            [
                "a1ac9e631b1c38ed"
            ]
        ]
    },
    {
        "id": "1849ea2986414070",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Init flow Variables out",
        "mode": "link",
        "links": [
            "83a5bccd57b9c2a0"
        ],
        "x": 425,
        "y": 160,
        "wires": []
    },
    {
        "id": "a24a06c77a88af1c",
        "type": "inject",
        "z": "35ebad916f0a27ed",
        "name": "Every 10 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 840,
        "wires": [
            [
                "6dae18247871f69e"
            ]
        ]
    },
    {
        "id": "d60dc2dab7fad64e",
        "type": "split",
        "z": "35ebad916f0a27ed",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 650,
        "y": 840,
        "wires": [
            [
                "7c60e75462fe7f46"
            ]
        ]
    },
    {
        "id": "7c60e75462fe7f46",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Shift up",
        "func": "return msg.payload;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 840,
        "wires": [
            [
                "e0d2b8e49c2e469b"
            ]
        ]
    },
    {
        "id": "6dae18247871f69e",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "g": "6be74e15039dce40",
        "name": "SpotPrice and Schedule",
        "func": "let trays = flow.get('trays');\nif (trays == undefined) return null;\nlet now = new Date();\n\nlet settingArray = [];\nfor (let ii = 0; ii < trays.length; ++ii)\n{\n    if (trays[ii].opState.value == 1)\n    {\n        let setRelay = 0;\n        let hours = convertTZ(now, trays[ii].timeZone.value).getHours();\n        if (trays[ii].startScheduleTime.value > trays[ii].stopScheduleTime.value)\n        {\n            if (trays[ii].startScheduleTime.value <= hours) setRelay = 1;\n            if (hours < trays[ii].stopScheduleTime.value )  setRelay = 1;\n        }\n        else\n        {\n            if ((trays[ii].startScheduleTime.value <= hours) && (hours < trays[ii].stopScheduleTime.value) ) setRelay = 1;\n        }\n        if (setRelay != trays[ii].setRelay.value)\n        {\n            let topic = flow.get('trayProps').box + '/' + trays[ii].type + '/' + trays[ii].name + '/setting/setting';\n            settingArray.push({topic: topic, payload:{cube:'setRelay',value:setRelay}});\n        }\n    }\n/*\n    if (trays[ii].opState.value == 2)\n    {\n        let setRelay = 0;\n        if (trays[ii].maxRate.value >= flow.get('spotPrice')[trays[ii].priceArea.value])\n        {\n            setRelay = 1;\n        }\n        if (setRelay != trays[ii].setRelay.value)\n        {\n            let topic = flow.get('trayProps').box + '/' + trays[ii].type + '/' + trays[ii].name + '/setting/setting';\n            settingArray.push({topic: topic, payload:{cube:'setRelay',value:setRelay}});\n        }\n    }\n*/\n// End  custom\n}\nif (settingArray.length < 1) return null;\nreturn {topic:'settingArray', payload:settingArray};\n\n//Got this from:https://stackoverflow.com/questions/10087819/convert-date-to-another-timezone-in-javascript\nfunction convertTZ(date, tzString) \n{\n    return new Date((typeof date === \"string\" ? new Date(date) : date).toLocaleString(\"en-US\", {timeZone: tzString}));   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 840,
        "wires": [
            [
                "d60dc2dab7fad64e"
            ]
        ]
    }
]